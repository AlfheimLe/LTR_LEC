%%-------------------- Experiment IV ---------------------------------%%
%% From the article 'Large-Scale Quasi-Newton Trust-Region Methods
%% With Low Dimensional Linear Equality Constraints' J.J. Brust, R.F. Marcia,
%% C.G. Petra
% Test problems generated by using a list of unconstrained
% CUTEst problems, and adding linear equality constraints to them. The
% linear constraints are synthetically generated.
%
% Comparison between two proposed solvers and two external solvers
%
%{

Initial verion: 09/14/17, J.B.,

Modification log:

06/05/18, J.B., Use modifed solver that computes performance ratio
    'rho' to accept steps. Tighter convergence bounds, too. 

06/27/16, J.B., Comparisons of proposed solvers with fminunc and RSQP
    
07/05/18, J.B., Comparison between the two proposed solvers, and fmincon
interior-point solver.

07/08/18, J.B., Removal of fmincon solver

07/19/18, J.B., Preparation for release

--------------------------------------------------------------------------
NOTE: This Experiment requires CUTEst to be installed

%}

clc;
clear;


addpath ../main
addpath ../auxiliary
addpath ../netlib/readmps

wtest       = warning('off','all');
currentpath = pwd;

datapath    = fullfile(currentpath,'..','/data/');
figpath     = fullfile(currentpath,'..','/figs/');
probpath    = fullfile(currentpath,'..','/auxiliary/');

rng(090317);

fprintf('---------------- EXPERIMENT III ------------------------\n');

%%----------------------- Parameters ----------------------------------%

% Set input parameters:
% %% Proposed solvers
% params=struct;
% params.m = 5;  % number of L-BFGS updates
% params.gtol = 1e-5;  % exit if ||g||_2<gtol*max(1,||x||_2)
% params.ranktol = 1e-7;  % tolerance for establishing rank of V
% params.dflag = 0;  % display parameter, 1 if to display information per iteration
% params.trtol = 0.1;  % exit MS algorithm if abs(||s||-delta)<trtol*delta
% params.ftol=1e-11;  % tolerance on relative function reduction
% 
% params.storedat =0;
% params.hastrrad =1;
% params.ctol     = 5e-5;
% params.btol     = 1e-10;
% params.dflag    = 0;
% params.maxit    = 100000;

%% L2-Const, SC-Const
options_const.storedat  = 0;
options_const.btol      = 1e-10;
options_const.dflag     = 0;
options_const.gtol      = 5e-5;
                        
%% fmincon
% interior-point algorithm
options_fmin_int        = optimoptions('fmincon',...   
                                        'GradObj',      'on',...
                                        'Algorithm',    'interior-point', ...
                                        'Hessian',      'lbfgs',...
                                        'MaxIter',      1e5, ...
                                        'MaxFunEvals',  1e6, ...
                                        'TolX',         1e-10,...
                                        'SubproblemAlgorithm', 'ldl-factorization'); % 'SubproblemAlgorithm', 'ldl-factorization'

CUTEst_init  % initialize CUTEr, see appropriate documentation 
fid     = fopen(fullfile(probpath,'cutest_list.txt'),'r');  % read file that contains CUTEr test problems
sfil    = 'TestResults';

% Initialize storage for output information
numRuns         = 1; % 3
numAlgorithms   = 2;
numProblems     = 62;
ex              = zeros(numProblems,numAlgorithms);
numf            = zeros(numProblems,numAlgorithms);
numg            = zeros(numProblems,numAlgorithms);
numit           = zeros(numProblems,numAlgorithms);
tcpu            = zeros(numProblems,numRuns,numAlgorithms);
t_aver          = zeros(numProblems,numAlgorithms);
tract           = zeros(numProblems,numAlgorithms);
numrst          = zeros(numProblems,numAlgorithms);

mm              = 10; % Number of equality constraints

p=1;
tline = fgets(fid);
while ischar(tline)     
    tline = fgets(fid);       
    
    if ~strcmp(tline(1),'%')  && ischar(tline)   
        
        eval(['!runcutest -p matlab -D ' tline]);
        prob            = cutest_setup();
        x0              = prob.x;
        params.trradb   = max(norm(x0),1);
        n               = size(x0,1);
        A               = (randn(mm,n))./params.trradb;
        
        b0              = randn(n,1);    
        b               = A*b0;
        
        x0              = A'*((A*A')\b);
        
        cons           = @(x)( const_quad_arg(x,A,b));
        obj            = @cutest_fun;
        
        options_const_l2            = options_const;
        options_const_l2.maxitroot  = 10;
        options_const_l2.epsroot    = 1e-5;
                       
        % SC
         s=1;
         [ex(p,s),numf(p,s),numg(p,s),numit(p,s),tcpu(s,:,p),tract(p,s)]=...
                runAlgorithm(@LTRSC_LEC_V1,obj,cons,x0,options_const,numRuns); % LTRSC_LEC
        % L2    
        s=s+1;        
        [ex(p,s),numf(p,s),numg(p,s),numit(p,s),tcpu(s,:,p),tract(p,s)]=...
                runAlgorithm(@LTRL2_LEC_V1,obj,cons,x0,options_const_l2,numRuns); % LTRL2_LEC
        
        % fmincon
%         s = s+1;
%         for ir = 1:numRuns
%            tic;
%            [x_fmin,f_fmin,ex_fmin,out_fmin] = fmincon(@cutest_fun,x0,[],[],A,b1,...,
%                                             [],[],[],options_fmin_int);
%            time_fmincon     = toc; 
%            tcpu(s,ir,p)     = time_fmincon;
%            ex(p,s)          = ex_fmin;
%            numf(p,s)        = out_fmin.funcCount;
%            numg(p,s)        = out_fmin.funcCount;
%            numit(p,s)       = out_fmin.iterations;
%         end
        
        
        % Average CPU time
        if p==1 && numRuns > 2
            for si=1:s
                t_aver(p,si) = sum(tcpu(si,3:numRuns,p))/(numRuns-2);
            end
        elseif numRuns == 2
            for si=1:s
                t_aver(p,si) = sum(tcpu(si,2:numRuns,p))/(numRuns-1);
            end
        else
            for si=1:s
                t_aver(p,si) = tcpu(si,1:1,p);
            end
        end             
        
        cutest_terminate();
        
        p=p+1;            
    end
    
end

leg={   'TR-$(\mathbf{P},\infty)$',...
        'TR-$\ell_2$'};

% leg={'TR-$(\mathbf{P},\infty)$',...
%        'TR-$\ell_2$',...
%        'fmincon-ldl'};
                
types.colors = ['b' 'r' ]; % 'y'  'g'
types.lines = {'-' '-.' }; % '-'
types.markers = ['o' 'o' ]; %'o'
                
indAlg = [1 2];

perf(ex(:,indAlg),t_aver(:,indAlg),leg(indAlg),1,types);
print(gcf, '-dpsc2', fullfile(figpath,'time_EX_IV.eps'));

perf(ex(:,indAlg),numit(:,indAlg),leg(indAlg),1,types);
print(gcf, '-dpsc2', fullfile(figpath,'iter_EX_IV.eps'));

save(fullfile(datapath,'EXPERIMENT_IV'),'ex','numit','t_aver','numf','numg','params','tract');

close ALL;

% Restore warning settings
warning(wtest);

